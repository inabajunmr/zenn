"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mdRendererFence = void 0;
function mdRendererFence(md) {
    // default renederer
    var defaultRender = md.renderer.rules.fence ||
        function (tokens, idx, options, env, self) {
            return self.renderToken(tokens, idx, options);
        };
    // override fence
    md.renderer.rules.fence = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var tokens = args[0], idx = args[1];
        // e.g. info = "js:fooBar.js"
        var langInfo = tokens[idx].info.split(/:/);
        // e.g. diff js => diff-js, js diff => js-diff js => js
        var langName = (langInfo === null || langInfo === void 0 ? void 0 : langInfo.length) ? langInfo[0]
            .split(' ')
            .filter(function (lang) { return !!lang; })
            .join('-')
            : '';
        var filename = langName.length && langInfo[1] ? langInfo[1] : null; // e.g "fooBar.js"
        // override info (e.g "js:fooBar.js" -> "js")
        tokens[idx].info = langName;
        var originalHTML = defaultRender.apply(void 0, args);
        if (tokens[idx].content.length === 0)
            return originalHTML;
        var filenameHTML = filename
            ? "<div class=\"code-block-filename-container\"><span class=\"code-block-filename\">" + md.utils.escapeHtml(filename) + "</span></div>"
            : '';
        return "\n      <div class=\"code-block-container\">\n        " + filenameHTML + "\n        " + originalHTML + "\n      </div>\n      ";
    };
}
exports.mdRendererFence = mdRendererFence;
